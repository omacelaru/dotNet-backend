// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace dotNet_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240129131519_remove-nullable-for-awards")]
    partial class removenullableforawards
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("dotNet_backend.Models.Club.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("dotNet_backend.Models.Competition.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("dotNet_backend.Models.Participation.Participation", b =>
                {
                    b.Property<Guid>("AthleteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FirstPlace")
                        .HasColumnType("int");

                    b.Property<int>("SecondPlace")
                        .HasColumnType("int");

                    b.Property<int>("ThirdPlace")
                        .HasColumnType("int");

                    b.HasKey("AthleteId", "CompetitionId");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("dotNet_backend.Models.Request.RequestInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignedToUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<string>("RequestedByUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("dotNet_backend.Models.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("dotNet_backend.Models.Athlete.Athlete", b =>
                {
                    b.HasBaseType("dotNet_backend.Models.User.User");

                    b.Property<Guid?>("CoachId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasIndex("CoachId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("dotNet_backend.Models.Coach.Coach", b =>
                {
                    b.HasBaseType("dotNet_backend.Models.User.User");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("dotNet_backend.Models.Club.Club", b =>
                {
                    b.HasOne("dotNet_backend.Models.Coach.Coach", "Coach")
                        .WithOne("Club")
                        .HasForeignKey("dotNet_backend.Models.Club.Club", "CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("dotNet_backend.Models.Participation.Participation", b =>
                {
                    b.HasOne("dotNet_backend.Models.Athlete.Athlete", "Athlete")
                        .WithMany("Participations")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotNet_backend.Models.Competition.Competition", "Competition")
                        .WithMany("Participations")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("dotNet_backend.Models.Athlete.Athlete", b =>
                {
                    b.HasOne("dotNet_backend.Models.Coach.Coach", "Coach")
                        .WithMany("Athletes")
                        .HasForeignKey("CoachId");

                    b.HasOne("dotNet_backend.Models.User.User", null)
                        .WithOne()
                        .HasForeignKey("dotNet_backend.Models.Athlete.Athlete", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("dotNet_backend.Models.Coach.Coach", b =>
                {
                    b.HasOne("dotNet_backend.Models.User.User", null)
                        .WithOne()
                        .HasForeignKey("dotNet_backend.Models.Coach.Coach", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dotNet_backend.Models.Competition.Competition", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("dotNet_backend.Models.Athlete.Athlete", b =>
                {
                    b.Navigation("Participations");
                });

            modelBuilder.Entity("dotNet_backend.Models.Coach.Coach", b =>
                {
                    b.Navigation("Athletes");

                    b.Navigation("Club");
                });
#pragma warning restore 612, 618
        }
    }
}
